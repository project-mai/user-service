/*
 * This file is generated by jOOQ.
 */
package ru.mai.user.jooq.tables.daos


import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import ru.mai.user.jooq.tables.User
import ru.mai.user.jooq.tables.records.UserRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserDao(configuration: Configuration?) : DAOImpl<UserRecord, ru.mai.user.jooq.tables.pojos.User, Long>(User.USER, ru.mai.user.jooq.tables.pojos.User::class.java, configuration) {

    /**
     * Create a new UserDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: ru.mai.user.jooq.tables.pojos.User): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<ru.mai.user.jooq.tables.pojos.User> = fetchRange(User.USER.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<ru.mai.user.jooq.tables.pojos.User> = fetch(User.USER.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): ru.mai.user.jooq.tables.pojos.User? = fetchOne(User.USER.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<ru.mai.user.jooq.tables.pojos.User> = fetchRange(User.USER.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<ru.mai.user.jooq.tables.pojos.User> = fetch(User.USER.NAME, *values)

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPassword(lowerInclusive: String?, upperInclusive: String?): List<ru.mai.user.jooq.tables.pojos.User> = fetchRange(User.USER.PASSWORD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    fun fetchByPassword(vararg values: String): List<ru.mai.user.jooq.tables.pojos.User> = fetch(User.USER.PASSWORD, *values)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmail(lowerInclusive: String?, upperInclusive: String?): List<ru.mai.user.jooq.tables.pojos.User> = fetchRange(User.USER.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmail(vararg values: String): List<ru.mai.user.jooq.tables.pojos.User> = fetch(User.USER.EMAIL, *values)
}
